import 'package:http/http.dart' as http;
import 'dart:convert';


Future<void> fetchAndComparePriceDifferences() async {
  try {
    List<double> perpetualClosePrices = [];
    List<double> futuresClosePrices = [];
    final String perpetualPair = 'BTC-PERPETUAL';
    final String futuresPair = 'BTC-28MAR25';
    final String interval = '1'; // 1-minute candles

    // Get the current time (end timestamp)
    final int endTime = DateTime.now().millisecondsSinceEpoch;

    // Get the time 1 hour ago (start timestamp)
    final int startTime = DateTime.now().subtract(Duration(days: 7)).millisecondsSinceEpoch;

    // Fetch data for both pairs
    Future<Map<String, dynamic>> fetchOHLC(String pair) async {
      final String url =
          'https://www.deribit.com/api/v2/public/get_tradingview_chart_data'
          '?end_timestamp=$endTime&instrument_name=$pair&resolution=$interval&start_timestamp=$startTime';
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        return jsonDecode(response.body)['result'];
      } else {
        throw Exception('Failed to fetch data for $pair: ${response.statusCode}');
      }
    }

    // Fetch data concurrently
    final results = await Future.wait([fetchOHLC(perpetualPair), fetchOHLC(futuresPair)]);
    final perpetualData = results[0];
    final futuresData = results[1];

    // Safely parse the data
    List<double> parseClosePrices(List<dynamic>? input) {
      if (input == null) return [];
      return input.map((e) => (e is num) ? e.toDouble() : 0.0).toList();
    }

    perpetualClosePrices = parseClosePrices(perpetualData['close']);
    futuresClosePrices = parseClosePrices(futuresData['close']);

    // Calculate price differences
    double maxDifference = double.negativeInfinity;
    double minDifference = double.infinity;

    for (int i = 0; i < perpetualClosePrices.length && i < futuresClosePrices.length; i++) {
      double difference = perpetualClosePrices[i] - futuresClosePrices[i];
      if (difference > maxDifference) maxDifference = difference;
      if (difference < minDifference) minDifference = difference;
    }

    print('Maximum Price Difference: $maxDifference');
    print('Minimum Price Difference: $minDifference');
  } catch (e) {
    print('Error: $e');
  }
}

void main()async{
  await fetchAndComparePriceDifferences();
}