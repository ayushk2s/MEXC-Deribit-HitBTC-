import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:async';

void main() async {
  Future.delayed(const Duration(seconds: 1), () async {
    final perpetualPair = 'BTC-PERPETUAL';
    final futuresPair = 'ETH-PERPETUAL'; // Example futures contract

    try {
      final perpetualPriceData = await fetchOrderBook(perpetualPair);
      final futuresPriceData = await fetchOrderBook(futuresPair);

      final perpetualPrice = perpetualPriceData['markPrice'];
      final futuresPrice = futuresPriceData['markPrice'];

      print('Perpetual Price: $perpetualPrice; '
          'bid: ${perpetualPriceData['nearestBid']['price']}, '
          'Amount: ${perpetualPriceData['nearestBid']['amount']}; '
          'ask: ${perpetualPriceData['nearestAsk']['price']}, '
          'Amount: ${perpetualPriceData['nearestAsk']['amount']}');

      print('Futures Price: $futuresPrice; '
          'bid: ${futuresPriceData['nearestBid']['price']}, '
          'Amount: ${futuresPriceData['nearestBid']['amount']}; '
          'ask: ${futuresPriceData['nearestAsk']['price']}, '
          'Amount: ${futuresPriceData['nearestAsk']['amount']}');

      print('Price Difference: ${perpetualPrice - futuresPrice}');
      print('-----------------------------------------------------------------');
    } catch (e) {
      print('Error: $e');
    }

    Future.delayed(const Duration(seconds: 2), () async {
      main();
    });
  });
}

Future<Map<String, dynamic>> fetchOrderBook(String instrumentName) async {
  final String url = "https://www.deribit.com/api/v2/public/get_order_book";
  final Map<String, String> params = {'instrument_name': instrumentName};

  try {
    final Uri uri = Uri.parse(url).replace(queryParameters: params);
    final http.Response response = await http.get(uri);

    if (response.statusCode == 200) {
      final Map<String, dynamic> data = jsonDecode(response.body);

      if (data.containsKey('result') && data['result'] != null) {
        final result = data['result'];

        final double markPrice = result['mark_price'];

        // Nearest bid and ask
        final nearestBid = {
          'price': result['bids'][0][0],
          'amount': result['bids'][0][1],
        };
        final nearestAsk = {
          'price': result['asks'][0][0],
          'amount': result['asks'][0][1],
        };

        return {
          'markPrice': markPrice,
          'nearestBid': nearestBid,
          'nearestAsk': nearestAsk,
        };
      } else {
        throw Exception('No data available for the instrument.');
      }
    } else {
      throw Exception('Error: HTTP ${response.statusCode}');
    }
  } catch (e) {
    throw Exception('Error fetching data: $e');
  }
}
