import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:async';

void main() async {
  final wallet = VirtualWallet(50.0, 50.0);
  final perpetualPair = 'XRP_USDT';
  final spotPair = 'XRP_USDT';
  double lastPriceDifference = 0.0;
  bool isTradeActive = false;
  String activeTrade = '';

  Timer.periodic(const Duration(seconds: 2), (timer) async {
    try {
      final perpetualPrice = await fetchPerpetualPrice(perpetualPair);
      final spotPrice = await fetchSpotPrice(spotPair);
      final priceDifference = perpetualPrice - spotPrice;

      print('Spot Price: $spotPrice');
      print('Perpetual Price: $perpetualPrice');
      print('Price Difference: $priceDifference');

      if (!isTradeActive) {
        if (priceDifference > 0.001) {
          // Trade logic: Buy Spot, Sell Perpetual
          activeTrade = 'Buy Spot, Sell Perpetual';
          isTradeActive = true;
          print('Trade Executed: $activeTrade');
        } else if (priceDifference < -0.001) {
          // Trade logic: Sell Spot, Buy Perpetual
          activeTrade = 'Sell Spot, Buy Perpetual';
          isTradeActive = true;
          print('Trade Executed: $activeTrade');
        }
      } else {
        // Check if the trade can be closed
        if ((priceDifference.abs() < 0.001) || (priceDifference.sign != lastPriceDifference.sign)) {
          print('Trade Completed: $activeTrade');
          isTradeActive = false;
          activeTrade = '';
        }
      }

      // Update last price difference
      lastPriceDifference = priceDifference;

      print('-----------------------------------------------------------------');
    } catch (e) {
      print('Error: $e');
    }
  });
}

Future<double> fetchPerpetualPrice(String symbol) async {
  final String url = "https://contract.mexc.com/api/v1/contract/ticker";
  final Map<String, String> params = {'symbol': symbol};

  try {
    final Uri uri = Uri.parse(url).replace(queryParameters: params);
    final http.Response response = await http.get(uri);

    if (response.statusCode == 200) {
      final Map<String, dynamic> data = jsonDecode(response.body);
      if (data.containsKey('data') && data['data'] != null) {
        final result = data['data'];
        return result['lastPrice'].toDouble(); // Correctly handle double type
      } else {
        throw Exception('No data available for the symbol.');
      }
    } else {
      throw Exception('Error: HTTP ${response.statusCode}');
    }
  } catch (e) {
    throw Exception('Error fetching perpetual price: $e');
  }
}

Future<double> fetchSpotPrice(String symbol) async {
  final String url = "https://www.mexc.com/open/api/v2/market/ticker";
  final Map<String, String> params = {'symbol': symbol};

  try {
    final Uri uri = Uri.parse(url).replace(queryParameters: params);
    final http.Response response = await http.get(uri);
    if (response.statusCode == 200) {
      final Map<String, dynamic> data = jsonDecode(response.body);
      if (data.containsKey('data') && data['data'] != null) {
        final result = data['data'][0]; // Correct structure for spot API
        return double.parse(result['last']); // Correctly parse spot price
      } else {
        throw Exception('No data available for the symbol.');
      }
    } else {
      throw Exception('Error: HTTP ${response.statusCode}');
    }
  } catch (e) {
    throw Exception('Error fetching spot price: $e');
  }
}


// Virtual wallet class to track balances and profits
class VirtualWallet {
  double spotBalance;
  double perpetualBalance;
  double totalBalance;

  VirtualWallet(this.spotBalance, this.perpetualBalance)
      : totalBalance = spotBalance + perpetualBalance;

  void updateBalances(double spotProfit, double perpetualProfit) {
    spotBalance += spotProfit;
    perpetualBalance += perpetualProfit;
    totalBalance = spotBalance + perpetualBalance;
  }
}