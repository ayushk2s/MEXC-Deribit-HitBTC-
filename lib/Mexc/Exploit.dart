import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:async';

void main() async {
  // Start the process with a delay to allow asynchronous execution
  Future.delayed(const Duration(seconds: 1), () async {
    final perpetualPair = 'ETHUSDC'; // MEXC uses no slash in symbols
    final futuresPair = 'ETHUSDT'; // Same symbol for this example

    try {
      // Fetch order book data for perpetual and futures
      final perpetualPriceData = await fetchOrderBook(perpetualPair);
      final futuresPriceData = await fetchOrderBook(futuresPair);

      // Extract prices and print details
      final perpetualPrice = perpetualPriceData['markPrice'];
      final futuresPrice = futuresPriceData['markPrice'];

      print('Perpetual Price: $perpetualPrice; '
          'Bid: ${perpetualPriceData['nearestBid']['price']}, '
          'Amount: ${perpetualPriceData['nearestBid']['amount']}; '
          'Ask: ${perpetualPriceData['nearestAsk']['price']}, '
          'Amount: ${perpetualPriceData['nearestAsk']['amount']}');

      print('Futures Price: $futuresPrice; '
          'Bid: ${futuresPriceData['nearestBid']['price']}, '
          'Amount: ${futuresPriceData['nearestBid']['amount']}; '
          'Ask: ${futuresPriceData['nearestAsk']['price']}, '
          'Amount: ${futuresPriceData['nearestAsk']['amount']}');

      print('Price Difference: ${perpetualPrice - futuresPrice}');
      print('-----------------------------------------------------------------');
    } catch (e) {
      print('Error: $e');
    }

    // Recursive call to repeat every 3 seconds
    Future.delayed(const Duration(seconds: 3), () async {
      main();
    });
  });
}

Future<Map<String, dynamic>> fetchOrderBook(String symbol) async {
  final String url = "https://api.mexc.com/api/v3/depth";
  final Map<String, String> params = {'symbol': symbol, 'limit': '5'};

  try {
    // Build the request URL with parameters
    final Uri uri = Uri.parse(url).replace(queryParameters: params);
    final http.Response response = await http.get(uri);

    if (response.statusCode == 200) {
      // Parse the response JSON
      final Map<String, dynamic> data = jsonDecode(response.body);

      if (data.containsKey('bids') && data.containsKey('asks')) {
        // Extract nearest bid and ask prices
        final nearestBid = {
          'price': double.parse(data['bids'][0][0]),
          'amount': double.parse(data['bids'][0][1]),
        };
        final nearestAsk = {
          'price': double.parse(data['asks'][0][0]),
          'amount': double.parse(data['asks'][0][1]),
        };

        // Calculate the mark price (average of nearest bid and ask)
        final markPrice = (nearestBid['price']! + nearestAsk['price']!) / 2;

        return {
          'markPrice': markPrice,
          'nearestBid': nearestBid,
          'nearestAsk': nearestAsk,
        };
      } else {
        throw Exception('Order book data is missing.');
      }
    } else {
      throw Exception('Error: HTTP ${response.statusCode}');
    }
  } catch (e) {
    throw Exception('Error fetching data: $e');
  }
}
