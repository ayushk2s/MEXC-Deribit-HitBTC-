import 'dart:convert';
import 'package:arbitrage_trading/Mexc/TradingCodes/BalanceCheck.dart';
import 'package:arbitrage_trading/Mexc/TradingCodes/PriceDifferenceTrading.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'package:crypto/crypto.dart';

const apiKey = 'mx0vglyapIN01W6cTN';
const secretKey = '34c726b4c3004369bc45be1a50181bd9';
const String baseUrl = 'https://api.mexc.com/api/v3';
void main() async {
  DateTime now = DateTime.now();

  try{

    final perpetualPair = 'XRP_USDT';
    final spotPair = 'XRP_USDT';

    GetMexcAssetPrice getMexcAssetPrice = GetMexcAssetPrice();
    final perpetualPrice = await getMexcAssetPrice.fetchPerpetualPrice(perpetualPair);
    final spotPrice = await getMexcAssetPrice.fetchSpotPrice(spotPair);

    print('Spot Price: $spotPrice');
    print('Perpetual Price: $perpetualPrice');
    print('Price Difference: ${perpetualPrice-spotPrice}');

    Balance balance = Balance();
    double usdtBalance = await balance.getSpecificAssetBalance('USDT');
    print('TOtal bal $usdtBalance');
    double assetBuy = usdtBalance/spotPrice;
    print('Total xrp brought $assetBuy');
    // if(perpetualPrice - spotPrice > 0.0007){
    //   await placeSpotOrder('XRPUSDT', '$spotPrice','$assetBuy').whenComplete(()async{
    //     double xrpBalance = await balance.getSpecificAssetBalance('XRP');
    //     await transferFromFuturesToSpot('XRP', xrpBalance, 'SPOT', 'FUTURES');
    //   });
    // }
    if(spotPrice - perpetualPrice  > 0.0007){
         double xrpBalance = await balance.getSpecificAssetBalance('XRP');
         await transferFromFuturesToSpot('XRP', xrpBalance, 'FUTURES', 'SPOT');
    }
    // await transferFromFuturesToSpot('USDT', 2.85, 'FUTURES', 'SPOT');

  }finally{
    DateTime end = DateTime.now();
    print('${end.difference(now)}');
    print('-------------------------------------');
    // main();
  }
}



///Trading Codes Spot
Future<void> placeSpotOrder(String symbol, String price, String quantity) async {
  const apiKey = 'mx0vglyapIN01W6cTN';
  const secretKey = '34c726b4c3004369bc45be1a50181bd9';
  const endpoint = 'https://api.mexc.com/api/v3/order';

  final timestamp = DateTime.now().millisecondsSinceEpoch.toString();
  const recvWindow = '5000';

  final params = {
    'symbol': symbol,
    'side': 'BUY',
    'type': 'LIMIT',
    'price': price,
    'quantity': quantity,
    'recvWindow': recvWindow,
    'timestamp': timestamp,
  };

  final sortedParams = params.entries.map((e) {
    final key = Uri.encodeComponent(e.key);
    final value = Uri.encodeComponent(e.value);
    return '$key=$value';
  }).join('&');

  final signature = generateSignature(secretKey, sortedParams);
  final url = '$endpoint?$sortedParams&signature=$signature';

  final headers = {
    'X-MEXC-APIKEY': apiKey,
    'Content-Type': 'application/json',
  };

  try {
    final response = await http.post(
      Uri.parse(url),
      headers: headers,
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      print('Spot order placed successfully: $data');
    } else {
      print('Failed to place Spot order. Status: ${response.statusCode}, Body: ${response.body}');
    }
  } catch (e) {
    print('Error: $e');
  }
}

String generateSignature(String secretKey, String totalParams) {
  final hmac = Hmac(sha256, utf8.encode(secretKey));
  final digest = hmac.convert(utf8.encode(totalParams));
  return digest.toString().toLowerCase(); // Signature must be lowercase
}

///Trading codes Transfering

Future<void> transferFromFuturesToSpot(String asset, double amount, String from, String to) async {
  // Current timestamp in milliseconds
  final timestamp = DateTime.now().millisecondsSinceEpoch.toString();

  // Build the query parameters
  final queryParams = {
    'api_key': apiKey,
    'fromAccountType': '$from',
    'toAccountType': '$to',
    'asset': asset,
    'amount': amount.toString(),
    'timestamp': timestamp,
  };

  // Prepare the total params string to create the signature
  final totalParams = queryParams.entries.map((e) => '${e.key}=${e.value}').join('&');

  // Generate the signature
  final signature = generateSignature(secretKey, totalParams);

  // Add signature to the query parameters
  final url = Uri.parse('$baseUrl/capital/transfer?$totalParams&signature=$signature');

  print(url);
  // Send the POST request to the MEXC API
  final response = await http.post(url);

  if (response.statusCode == 200) {
    print('Transfer Successful: ${response.body}');
  } else {
    print('Error: ${response.body}');
  }
}


